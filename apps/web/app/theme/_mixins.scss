// In this file mixins are defined that can be used in the theme
// to make it easier to create new styles.




// This mixin is used to create a new style for a button.

@mixin button($color, $background) {
  background-color: $background;
  border: 1px solid $color;
  color: $color;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 8px;
}

// this example shows how to use the mixin
// .button {
//   @include button($color: #4CAF50, $background: white);
// }

// This mixin allows you to write media queries easily by defining breakpoints and applying styles accordingly.

$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 950px,
  xl: 1200px,
  xxl: 1440px,
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Breakpoint #{$breakpoint} does not exist in $breakpoints";
  }
}



// this example shows how to use the mixin

// .container {
//   width: 100%;
//   @include respond-to(sm) {
//     width: 540px;
//   }
//   @include respond-to(md) {
//     width: 720px;
//   }
//   @include respond-to(lg) {
//     width: 960px;
//   }
//   @include respond-to(xl) {
//     width: 1140px;
//   }
// }

//
@mixin grid-layout($columns) {
  display: grid;
  grid-gap: 20px;
  grid-template-columns: repeat($columns, minmax(0, 1fr));
  // make that the rows have a heigh that fit content
  grid-auto-rows: minmax(min-content, max-content);
  // make the rows automatically generated
  grid-auto-flow: dense;
}

// Mixin to make linearGradient

@mixin linearGradient($direction, $color) {
  background: $color;
  background: linear-gradient($direction, $color, darken($color, 4%));
}



@mixin linearGradientBorder($direction, $color) {
  background: $color;
  background: linear-gradient(#fff, #fff) padding-box,
  linear-gradient($direction, $color, darken($color, 4%)) border-box;

}

// this example shows how to use the mixin

// .container {
//   @include linearGradientBorder(to right, #4CAF50);
// }


// This mixin allows you to create transitions easily.

@mixin transition($property, $duration, $function) {
  transition: $property $duration $function;
}

// this example shows how to use the mixin

// .container {
//   @include transition(all, 0.5s, ease);
// }

// This mixin allows you to create transforms easily.

@mixin transform($property, $value) {
  transform: $property($value);
}

// this example shows how to use the mixin

// .container {
//   @include transform(rotate, 30deg);
// }

// this mixin allows you to create more flexible flexbox layouts

@mixin flex($direction: row, $align: center, $justify: center) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
}

// this example shows how to use the mixin

// .container {
//   @include flex(row, center, center);
// }

// This mixin allows you to create more flexible flexbox column layouts
@mixin flex-column {
  @include flex(column);
}

// this example shows how to use the mixin

// .container {
//   @include flex-column;
// }


@mixin flex-center {
  @include flex(row, center, center);
}

// this example shows how to use the mixin

// .container {
//   @include flex-center;
// }


@mixin flex-center-column {
  @include flex(column, center, center);
}

@mixin flex-center-vert {
  @include flex(row, center, null);
}

@mixin flex-center-horiz {
  @include flex(null, center, center);
}

@mixin flex-between {
  @include flex(row, center, space-between);
}

@mixin flex-evenly {
  @include flex(row, center, space-evenly);
}

@mixin flex-around {
  @include flex(row, center, space-around);
}

@mixin flex-start {
  @include flex(row, flex-start, center);
}

@mixin flex-column-between {
  @include flex(column, center, space-between);
}

@mixin flex-column-evenly {
  @include flex(column, center, space-evenly);
}

@mixin flex-column-around {
  @include flex(column, center, space-around);
}

// Create mixin scss for the component Container

@mixin container {
  width: $containerWidth;
  height: $containerHeight;
  max-width: $containerMaxWidth;
  margin: $containerMargin;
  padding: $containerPadding;
  background-color: $containerBackgroundColor;
  border: $containerBorder;
  border-radius: $containerBorderRadius;
  box-shadow: $containerBoxShadow;
}

// mixin to generate color classes according to the variant color map
/*
$color-map: (
  primary: $primaryColor,
  secondary: $secondaryColor,
  danger: $dangerColor,
  warning: $warningColor,
  success: $successColor,
  info: $infoColor,
  light: $gray5,
  dark: $darkColor
);
*/


@mixin color-classes($color-map) {
  @each $color, $value in $color-map {
    &.#{$color} {
      color: $value;
    }
  }
}

// this example shows how to use the mixin  

// .container {
//   @include color-classes($color-map);
// }

// mixin to generate pading horizontal

@mixin padding-x($padding) {
  padding-left: $padding;
  padding-right: $padding;
}

// this example shows how to use the mixin

// .container {
//   @include padding-x(10px);
// }

// mixin to generate pading vertical

@mixin padding-y($padding) {
  padding-top: $padding;
  padding-bottom: $padding;
}

// this example shows how to use the mixin

// .container {
//   @include padding-y(10px);
// }


// mixin to generate animation fade in fade out

@mixin fadeAnimation() {
  @keyframes fade-in {
    from {
      opacity: 0;
      visibility: hidden;
    }
    to {
      opacity: 1;
      visibility: visible;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
      visibility: visible;
    }
    to {
      opacity: 0;
      visibility: hidden;
    }
  }
}

// this example shows how to use the mixin

// .container {
//   @include fadeAnimation(0.5s);
// }

// mixin to generate animation slide in slide out

@mixin slideAnimation() {
  @keyframes slide-in {
    from {
      transform: translateY(100%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes slide-out {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(100%);
    }
  }
}

// this example shows how to use the mixin

// .container {
//   @include slideAnimation(0.5s);
// }





